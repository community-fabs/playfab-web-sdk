<% if (it.doc.calls.some(api => api.result === 'EmptyResponse')) { %>
import type { EmptyResponse } from "../types/PlayFab";
<% } %>
import type {
<% for(const request of new Set(it.doc.calls.flatMap(api => api.request))) { %>
  <%= request %>,
<% } %>
<% for(const result of new Set(it.doc.calls.flatMap(api => api.result).filter(type => type !== 'EmptyResponse'))) { %>
  <%= result %>,
<% } %>
} from "../types/PlayFab<%= it.doc.name %>Api";
import { PlayFabCommon } from "../PlayFabCommon";

export default class PlayFab<%= it.doc.name %>Api extends PlayFabCommon {

<% if (it.usesSessionToken) { %>
  IsClientLoggedIn () {
    return this.sessionTicket != null && this.sessionTicket.length > 0;
  }

<% } %>
<% for (const apiCall of it.doc.calls) { %>
<%~ it.generateApiSummary("  ", apiCall, "summary", true) %>
  <%= apiCall.name %> (request: <%~ apiCall.request %>, extraHeaders?: Record<string, string>) {
<%~ it.getRequestActions("    ", apiCall) %>
<% const resultActions = it.getResultActions("        ", apiCall); %>
<% if (resultActions) { %>
    return this.ExecuteRequestWrapper<<%~ apiCall.result %>>("<%= apiCall.url %>", request, <%~ it.getAuthParams(apiCall) %>, extraHeaders)
      .then(result => {
<%~ resultActions %>

        return result;
      });
<% } else { %>
    return this.ExecuteRequestWrapper<<%~ apiCall.result %>>("<%= apiCall.url %>", request, <%~ it.getAuthParams(apiCall) %>, extraHeaders);
<% } %>
  }

<% } %>
};
